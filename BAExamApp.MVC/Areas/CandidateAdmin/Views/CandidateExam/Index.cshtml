@using BAExamApp.MVC.Areas.CandidateAdmin.Models.CandidateExamVMs
@model IEnumerable<CandidateExamListVM>

@{
	ViewData["Title"] = @SharedLocalizer["Exams"];
}

<head>
	<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
	<style>
		.tooltip-inner {
			max-width: 350px !important;
		}

		.cursor {
			cursor: pointer;
		}
	</style>
</head>

<div class="card card-docs flex-row-fluid mb-2 overflow-auto">
	<!--begin::Card Body-->
	<div class="card-body fs-6 py-15 px-10 py-lg-8 px-lg-15 text-gray-700">
		<!--begin::Section-->
		<div class="p-0">
			<!--begin::Heading-->
			<div class="d-flex justify-content-between mb-7">
				<h3 class="fw-bolder m-0" id="server-side">
					@SharedLocalizer["Exams"]
					<span class="material-symbols-outlined" style="margin-left: 5px; font-size: 130%;"
						  data-bs-toggle="tooltip" data-bs-placement="top"
						  title="@SharedLocalizer["Candidate_Exam_Filter_Warning"]">
						info
					</span>
				</h3>
				<div class="">
					<a asp-action="Create" class="btn btn-primary">
						<!--begin::Svg Icon | path: icons/duotune/arrows/arr075.svg-->
						<span class="svg-icon svg-icon-2">
							<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
								<rect opacity="0.5" x="11.364" y="20.364" width="16" height="2" rx="1" transform="rotate(-90 11.364 20.364)" fill="currentColor" />
								<rect x="4.36396" y="11.364" width="16" height="2" rx="1" fill="currentColor" />
							</svg>
						</span>
						<!--end::Svg Icon--> @SharedLocalizer["AddForCandidates"]
					</a>
					<br />
					<a asp-action="CreateLink" class="btn btn-primary mt-3">
						<!--begin::Svg Icon | path: icons/duotune/arrows/arr075.svg-->
						<span class="svg-icon svg-icon-2">
							<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
								<rect opacity="0.5" x="11.364" y="20.364" width="16" height="2" rx="1" transform="rotate(-90 11.364 20.364)" fill="currentColor" />
								<rect x="4.36396" y="11.364" width="16" height="2" rx="1" fill="currentColor" />
							</svg>
						</span>
						<!--end::Svg Icon--> @SharedLocalizer["AddPublic"]
					</a>
				</div>
			
			</div>
			<!--end::Heading-->
			<!--begin::CRUD-->
			<div class="py-5">
				<!--begin::Wrapper-->
				<div class="flex " data-kt-docs-table-toolbar="base">
					<form class="form-question" asp-controller="CandidateQuestion" asp-action="GetCandidateQuestionsByGivenValues" method="post" onsubmit="return false">
						<div class="classroomfilter flex-row">
							<div class="row g-5 align-items-end d-flex flex-row">
								<div class="d-inline-flex align-items-end">
									<div class="form-floating col-md-4 mb-3 mx-5">
										<input type="text" class="form-control form-control-solid" style="height:55px" id="ExamName" name="ExamName" placeholder="@SharedLocalizer["Exam_Name"]" />
										<label>@SharedLocalizer["Exam_Name"]</label>
									</div>
									<div class="form-floating col-md-2 mb-3 mx-5">
										<input type="date" class="form-control form-control-solid" id="CreatedDate" name="CreatedDate" placeholder="@SharedLocalizer["Start_Time"]" />
										<label>@SharedLocalizer["Start_Time"]</label>
									</div>
									<div class="form-floating col-md-2 mb-3 mx-5">
										<input type="date" class="form-control form-control-solid" id="EndDate" name="EndDate" placeholder="@SharedLocalizer["End_Time"]" />
										<label>@SharedLocalizer["End_Time"]</label>
									</div>
								</div>
							</div>
						</div>
					</form>
				</div>
				<!--end::Wrapper-->
			</div>
			<!--end::CRUD-->
			<!--begin::Datatable-->
			<table id="kt_datatable_example_1" class="table align-middle table-row-dashed min-h-90px fs-6 gy-5">
				<thead>
					<tr class="text-start text-gray-400 fw-bolder fs-7 text-uppercase gs-0">
						<th class="sorting" tabindex="0" aria-controls="kt_datatable_example_1" rowspan="1" colspan="1" aria-label="Customer Name: activate to sort column ascending" style="width: 175.25px;">@SharedLocalizer["Exam_Name"]</th>
						<th class="sorting" tabindex="0" aria-controls="kt_datatable_example_1" rowspan="1" colspan="1" aria-label="Company: activate to sort column ascending" style="width: 226.25px;">@SharedLocalizer["Exam_Date_and_Time"]</th>
						<th class="sorting" tabindex="0" aria-controls="kt_datatable_example_1" rowspan="1" colspan="1" aria-label="Payment Method: activate to sort column ascending" style="width: 131.25px;">@SharedLocalizer["Exam_Duration"]</th>
						<th class="sorting" tabindex="0" aria-controls="kt_datatable_example_1" rowspan="1" colspan="1" aria-label="Payment Method: activate to sort column ascending" style="width: 131.25px;">@SharedLocalizer["Exam_State"]</th>
						<th class="text-start min-w-100px sorting_disabled" rowspan="1" colspan="1" aria-label="Actions" style="width: 108.25px;">@SharedLocalizer["Transactions"]</th>
					</tr>
				</thead>
				<tbody class="text-gray-600 fw-bold" id="examList">
					@foreach (var item in @Model.OrderByDescending(x => x.ExamDateTime))
					{
						<tr>
							<td id="exam-list-item-name" class="categories text-start">@item.Name</td>
							<td id="exam-list-item-date" class="categories text-start">@item.ExamDateTime</td>
							<td class="categories text-start">@item.ExamDuration</td>

							@if (item.ExamLinkEndDate == null)
							{
								@if (item.ExamDateTime.AddHours(12) < DateTime.Now)
								{
									<td class="categories text-start text-danger">@SharedLocalizer["Exam_Expired"]</td>
								}
								else if (item.IsStarted)
								{
									<td class="categories text-start text-success">@SharedLocalizer["Exam_Started"]</td>
								}
								else
								{
									<td class="categories text-start text-warning">@SharedLocalizer["Exam_Not_Started"]</td>
								}
							}
							else{

								@if (item.ExamLinkEndDate < DateTime.Now)
								{
									<td class="categories text-start text-danger">@SharedLocalizer["Exam_Expired"]</td>
								}
								else
								{
									<td class="categories text-start text-success">@SharedLocalizer["Exam_Started"]</td>
								}

						}
							
							<td class="text-start">
								<a href="#" class="btn btn-light btn-active-light-primary btn-sm" data-kt-menu-trigger="click" data-kt-menu-placement="bottom-end">
									@SharedLocalizer["Transactions"]
									<span class="svg-icon svg-icon-5 m-0">
										<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0 0 24 24" version="1.1">
											<g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
												<polygon points="0 0 24 0 24 24 0 24"></polygon>
												<path d="M6.70710678,15.7071068 C6.31658249,16.0976311 5.68341751,16.0976311 5.29289322,15.7071068 C4.90236893,15.3165825 4.90236893,14.6834175 5.29289322,14.2928932 L11.2928932,8.29289322 C11.6714722,7.91431428 12.2810586,7.90106866 12.6757246,8.26284586 L18.6757246,13.7628459 C19.0828436,14.1360383 19.1103465,14.7686056 18.7371541,15.1757246 C18.3639617,15.5828436 17.7313944,15.6103465 17.3242754,15.2371541 L12.0300757,10.3841378 L6.70710678,15.7071068 Z" fill="currentColor" fill-rule="nonzero" transform="translate(12.000003, 11.999999) rotate(-180.000000) translate(-12.000003, -11.999999)"></path>
											</g>
										</svg>
									</span>
								</a>
								<div class="menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-bold fs-7 w-125px py-4"
									 data-kt-menu="true">
									<div class="menu-item px-3">
										<a asp-action="Details" asp-route-id="@item.Id" class="menu-link px-3 detailsButton">@SharedLocalizer["Details"]</a>
										@* <a asp-action="Delete" asp-route-id="@item.Id" class="menu-link px-3 deleteAction">@SharedLocalizer["Delete"]</a> *@
										@if (!item.IsStarted && item.ExamDateTime.AddHours(12) > DateTime.Now && item.ExamLinkEndDate == null)
										{
											<a class="menu-link px-3" onclick="StartExam('@item.Id')" data-exam-id="@item.Id">@SharedLocalizer["Start_Exam"]</a>
										}
										@* <a asp-action="ExamQuestions" asp-route-id="@item.Id" class="menu-link px-3">@SharedLocalizer["Evaluate"]</a> *@
									</div>
								</div>
							</td>
						</tr>
					}
				</tbody>
			</table>
			<div id="empty" class="text-center mb-5">
				@SharedLocalizer["Empty_List"]
			</div>
			<div class="row">
				<div class="form-group col-md-1">
					<select class="form-select form-select-sm form-select-solid" id="itemsPerPage">
						<option value="5">5</option>
						<option value="10">10</option>
						<option selected value="20">20</option>
						<option value="50">50</option>
					</select>
				</div>
				<div id="pagination" class="col-md-10">
				</div>
				<div class="col-md-1"></div>
			</div>
		</div>
		<!--end::Section-->
	</div>
	<!--end::Card Body-->
</div>
<!--end::Card-->
@section Scripts {
	<script src="~/newlayouts/src/js/custom/apps/user-management/users/list/start-candidate-exam.js"></script>
	<script>
		var localizedTexts = {
			unsavedChangesTitle: '@SharedLocalizer["Unsaved_Changes_Title"]',
			unsavedChangesText: '@SharedLocalizer["Unsaved_Changes_Text"]',
			confirmButtonText: '@SharedLocalizer["Yes_Leave"]',
			cancelButtonText: '@SharedLocalizer["No_Stay"]',
			formSubmittedText: '@SharedLocalizer["Form_Submitted_Text"]',
			okButtonText: '@SharedLocalizer["Ok_Button_Text"]',
			startExamConfirmation: '@SharedLocalizer["Start_Exam_Confirmation"]',
			yesStart: '@SharedLocalizer["Yes_Start"]',
			noCancel: '@SharedLocalizer["No_Cancel"]',
			confirmTitle: '@SharedLocalizer["Confirm_Delete_Title"]',
			confirmText: '@SharedLocalizer["Confirm_Delete_Text"]',
			confirmDeleteButtonText: '@SharedLocalizer["Confirm_Button_Text"]',
			cancelDeleteButtonText: '@SharedLocalizer["Cancel_Button_Text"]',
			reschudleExamText: '@SharedLocalizer["Reschedule_Exam"]'
		};

		var localizer = {
			emptyTable: '@SharedLocalizer["Empty_Data"]',
			info: '@SharedLocalizer["Info"]',
			infoEmpty: '@SharedLocalizer["Info_Empty"]',
			infoFiltered: '@SharedLocalizer["Info_Filtered"]',
			zeroRecords: '@SharedLocalizer["Zero_Records"]'
		};

		const tbody = document.getElementById("examList");
		const createdDateInput = document.getElementById("CreatedDate");
		const endDateInput = document.getElementById("EndDate");
		const examNameInput = document.getElementById("ExamName");

		const itemCount = document.getElementById("itemsPerPage");


		// const model = @Html.Raw(Json.Serialize(Model));

		function updateDateInputs() {
			const filterStartDate = createdDateInput.value;
			const filterEndDate = endDateInput.value;

			if (filterStartDate) {
				endDateInput.min = filterStartDate;
			} else {
				endDateInput.min = "";
			}

			if (filterEndDate) {
				createdDateInput.max = filterEndDate;
			} else {
				createdDateInput.max = "";
			}
		}



		function insertTable(page = 1) {
			const filterStartDate = createdDateInput.value;
			const filterEndDate = endDateInput.value;
			const filterName = examNameInput.value.toLowerCase();
			const countInPage = itemCount.value;

			const rows = tbody.querySelectorAll("tr");

			let count = 0;



			rows.forEach(row => {
				const name = row.querySelector("#exam-list-item-name").innerText.toLowerCase();
				const dateTime = row.querySelector("#exam-list-item-date").innerText;

				let examDateTime;
				if (dateTime.includes('.')) {
					const [datePart, timePart] = dateTime.split(' ');
					const [day, month, year] = datePart.split('.');
					const [hour, minute, second] = timePart.split(':');
					examDateTime = new Date(`${year}-${month}-${day}T${hour}:${minute}:${second}`);
				} else {
					examDateTime = new Date(dateTime);
				}

				const isStartDateMatch = filterStartDate ? examDateTime.getTime() >= new Date(filterStartDate).getTime() : true;
				const isEndDateMatch = filterEndDate ? examDateTime.getTime() <= new Date(filterEndDate + "T23:59:59").getTime() : true;
				const isNameMatch = name.includes(filterName);

				if (isStartDateMatch && isEndDateMatch && isNameMatch) {
					count++;
					row.style.display = count > (page - 1) * countInPage && count < page * countInPage + 1 ? "" : "none";
				} else {
					row.style.display = "none";
				}
			});
			if (count <= 0) {
				document.querySelector("#empty").classList.remove("d-none");
			} else {
				document.querySelector("#empty").classList.add("d-none");
			}


			pagination(count, page);
		}

		function pagination(count, page) {
			const countInPage = itemCount.value;

			const pageCount = Math.ceil(count / countInPage)

			const divPage = document.querySelector("#pagination");
			divPage.innerHTML = "";

			const ul = document.createElement("ul");
			ul.className = "pagination justify-content-center";

			const firstLi = document.createElement("li");
			if (page === 1) {
				firstLi.className = "page-item disabled";

			} else {
				firstLi.className = "page-item cursor";
				firstLi.onclick = () => insertTable(page - 1);
			}

			firstLi.innerHTML = `<div class="page-link" >&#9664;</div>`;
			ul.appendChild(firstLi);

			for (let i = 1; i <= pageCount; i++) {
				const midLi = document.createElement("li");
				if (page === i) {
					midLi.className = "page-item active cursor";
				}
				else {
					midLi.classList = "page-item cursor";
				}
				midLi.innerHTML = `<div class="page-link">${i} <span class="sr-only">(current)</span></div>`;
				midLi.onclick = () => insertTable(i);
				ul.appendChild(midLi);
			}

			const lastLi = document.createElement("li");
			if (page === pageCount) {
				lastLi.className = "page-item disabled";
			} else {
				lastLi.className = "page-item cursor";
				lastLi.onclick = () => insertTable(page + 1);
			}
			lastLi.innerHTML = `<div class="page-link">&#9654;</div>`;
			ul.appendChild(lastLi);
			divPage.appendChild(ul);
		}




		itemCount.addEventListener("change", () => insertTable(1));


		createdDateInput.addEventListener("input", () => {
			updateDateInputs();
			insertTable(1);
		});
		endDateInput.addEventListener("input", () => {
			updateDateInputs();
			insertTable(1);
		});
		examNameInput.addEventListener("input", () => insertTable(1));

		updateDateInputs();
		insertTable(1);
	</script>
}
