@model AdminSubjectDetailVM

@{
    ViewData["Title"] = ViewLocalizer["Subject_Details"];
}

<div class="card mb-5 mb-xl-10" id="kt_profile_details_view">
    <div class="card-header cursor-pointer">
        <div class="card-title m-0">
            <h5 class="text-center">@ViewLocalizer["Subject_Details"]</h5>
        </div>
        <div class="d-flex justify-content-end">
            <a class="btn btn-secondary align-self-center ms-2" asp-controller="Subject" asp-action="Index">@SharedLocalizer["Back_List"]</a>
            <a class="btn btn-primary align-self-center ms-2" id="kt-update-subject" onclick="loadSubjectData('@Model.Id')" data-subject-id="@Model.Id" data-bs-toggle="modal" data-bs-target="#updateSubjectModal">
                @SharedLocalizer["Edit"]
            </a>
            @if (Model.Status == Status.Active)
            {
                <a class="btn btn-danger align-self-center ms-2 deleteAction" data-id="@Model.Id">@SharedLocalizer["Delete"]</a>
            }
            else if (Model.Status == Status.Passive)
            {
                <a class="btn btn-success align-self-center ms-2 activateAction" data-id="@Model.Id">@SharedLocalizer["Activate"]</a>
            }
        </div>
    </div>
    <div class="card-body p-9">
        <div class="row mb-7">
            <label class="col-lg-2 fw-bold text-muted">@SharedLocalizer["Subject_Name"]:</label>
            <div class="col-lg-10 fv-row">
                <span class="fw-bold text-gray-800 fs-6">@Model.Name</span>
            </div>
        </div>
        <div class="row mb-7">
            <label class="col-lg-2 fw-bold text-muted">@SharedLocalizer["Products_That_Include_Subject"]:</label>
            <div class="col-lg-10">
                <table class="table">
                    <thead>
                        <tr>
                            <th>@SharedLocalizer["Product_Name"]</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in Model.Products)
                        {
                            <tr>
                                <td>@product.Name</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="row mb-7">
            <label class="col-lg-2 fw-bold text-muted">@SharedLocalizer["Subtopics"]:</label>
            <div class="col-lg-10">
                <ul>
                    @foreach (var subtopic in Model.Subtopics)
                    {
                        <li>@subtopic.Name</li>
                    }
                </ul>
            </div>
        </div>
    </div>
</div>

<partial name="~/Areas/Admin/Views/Subject/UpdatePartialView.cshtml" model="new AdminSubjectUpdateVM()" />

@section Scripts
{
    <script src="~/js/updateSubject.js"></script>
    <script src="~/lib/limonte-sweetalert2/sweetalert2.all.js"></script>
    <script>
        var localizedTexts = {
            confirmTitle: '@SharedLocalizer["Confirm_Delete_Title"]',
            confirmText: '@SharedLocalizer["Confirm_Delete_Text"]',
            confirmButtonText: '@SharedLocalizer["Confirm_Button_Text"]',
            confirmPassiveButtonText: '@SharedLocalizer["Confirm_Passive_Button_Text"]',
            confirmActiveButtonText: '@SharedLocalizer["Confirm_Active_Button_Text"]',
            cancelButtonText: '@SharedLocalizer["Cancel_Button_Text"]',
            cancel: '@SharedLocalizer["Cancel"]',
            passiveTitle: '@SharedLocalizer["In_Use_SubjectTitle"]',
            passiveText: '@SharedLocalizer["In_Use_SubjectText"]',
            activeTitle: '@SharedLocalizer["Confirm_Active_Title"]',
            activeText: '@SharedLocalizer["Confirm_Active_Text"]',
            passiveActionButton: '@SharedLocalizer["Passive_Action_Button"]',
            threeUsedTitle: '@SharedLocalizer["Three_Used_Title"]',
            productandsubtopicUsedTitle: '@SharedLocalizer["Product_And_Subtopic_Used_Title"]',
            subtopicandQuestionUsedTitle: '@SharedLocalizer["Subtopic_And_Question_Used_Title"]',
            productandQuestionUsedTitle: '@SharedLocalizer["Product_And_Question_Used_Title"]',
            subtopicUsedTitle: '@SharedLocalizer["Subtopic_Used_Title"]',
            productUsedTitle: '@SharedLocalizer["Product_Used_Title"]',
            questionUsedSubjectTitle: '@SharedLocalizer["Question_Used_Subject_Title"]',
            deleteActionButton: '@SharedLocalizer["Confirm_Button_Text"]',
            deleteText: '@SharedLocalizer["Confirm_Delete_Text"]'
        };

        $(".deleteAction, .activateAction").click(function () {
            const id = $(this).attr("data-id");
            const isActivateAction = $(this).hasClass("activateAction");
            var title, text, confirmBtnText, deleteBtnColor;

            if (isActivateAction) {
                title = localizedTexts.activeTitle;
                text = localizedTexts.activeText;
                confirmBtnText = localizedTexts.confirmActiveButtonText;
                deleteBtnColor = '#28a745';
            } else {
                var isProductUsed = @Html.Raw(Json.Serialize(Model.IsProductUsed != null ? Model.IsProductUsed : false));
                var isSubtopicUsed = @Html.Raw(Json.Serialize(Model.IsSubtopicUsed != null ? Model.IsSubtopicUsed : false));
                var isQuestionUsed = @Html.Raw(Json.Serialize(Model.IsQuestionUsed != null ? Model.IsQuestionUsed : false));

                if (isProductUsed && isSubtopicUsed && isQuestionUsed) {
                    title = localizedTexts.threeUsedTitle;
                    text = localizedTexts.passiveText;
                    confirmBtnText = localizedTexts.passiveActionButton;
                } else if (isProductUsed && isSubtopicUsed) {
                    title = localizedTexts.productandsubtopicUsedTitle;
                    text = localizedTexts.passiveText;
                    confirmBtnText = localizedTexts.passiveActionButton;
                } else if (isSubtopicUsed && isQuestionUsed) {
                    title = localizedTexts.subtopicandQuestionUsedTitle;
                    text = localizedTexts.passiveText;
                    confirmBtnText = localizedTexts.passiveActionButton;
                } else if (isProductUsed && isQuestionUsed) {
                    title = localizedTexts.productandQuestionUsedTitle;
                    text = localizedTexts.passiveText;
                    confirmBtnText = localizedTexts.passiveActionButton;
                } else if (isSubtopicUsed) {
                    title = localizedTexts.subtopicUsedTitle;
                    text = localizedTexts.passiveText;
                    confirmBtnText = localizedTexts.passiveActionButton;
                } else if (isProductUsed) {
                    title = localizedTexts.productUsedTitle;
                    text = localizedTexts.passiveText;
                    confirmBtnText = localizedTexts.passiveActionButton;
                } else if (isQuestionUsed) {
                    title = localizedTexts.questionUsedSubjectTitle;
                    text = localizedTexts.passiveText;
                    confirmBtnText = localizedTexts.passiveActionButton;
                } else {
                    title = localizedTexts.confirmTitle;
                    text = localizedTexts.deleteText;
                    confirmBtnText = localizedTexts.deleteActionButton;
                }
                deleteBtnColor = (isProductUsed || isSubtopicUsed || isQuestionUsed) ? '#28a745' : '#d33';
            }

            Swal.fire({
                title: title,
                text: text,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: deleteBtnColor,
                cancelButtonColor: '#3085d6',
                confirmButtonText: confirmBtnText,
                cancelButtonText: localizedTexts.cancel
            }).then((result) => {
                if (result.isConfirmed) {
                    const url = isActivateAction ? "@Url.Action("ChangeStatus")" : "@Url.Action("Delete")";
                    $.ajax({
                        type: "GET",
                        url: url + "?id=" + id,
                        success: function (result) {
                            if (result.isSuccess) {
                                setTimeout(() => location.href = "@Url.Action("index")", 1000);
                            }
                        }
                    });
                }
            });
        });
           var localize = {
            unsavedChangesTitle: '@SharedLocalizer["Unsaved_Changes_Title"]',
            unsavedChangesText: '@SharedLocalizer["Unsaved_Changes_Text"]',
            confirmButtonText: '@SharedLocalizer["Yes_Leave"]',
            cancelButtonText: '@SharedLocalizer["No_Stay"]'
        };

        document.addEventListener("DOMContentLoaded", function () {
            const backListButton = document.getElementById('backListButton');

            if (backListButton) {
                backListButton.addEventListener('click', function (event) {
                    event.preventDefault();
                    const redirectUrl = backListButton.getAttribute('href');

                    Swal.fire({
                        title: localize.unsavedChangesTitle,
                        text: localize.unsavedChangesText,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: localize.confirmButtonText,
                        cancelButtonText: localize.cancelButtonText
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = redirectUrl;
                        }
                    });
                });
            } else {
                console.error("Back_List butonu bulunamadı!");
            }
        });
    </script>
}

