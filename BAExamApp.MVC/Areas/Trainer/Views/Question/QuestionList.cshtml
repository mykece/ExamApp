@model IPagedList<TrainerQuestionListVM>
@using BAExamApp.MVC
@using Microsoft.Extensions.Localization
@using X.PagedList.Mvc.Common
@using X.PagedList.Mvc.Core
@using X.PagedList
@using X.PagedList.Mvc.Core.Common
@inject IStringLocalizer<SharedModelResource> localizer

@{
    //var questionState = ViewBag.QuestionState;
    var currentPageSize = ViewBag.PageSize ?? 10;
    var questionState = (State)ViewData["Question_State"];
    ViewData["Title"] = @SharedLocalizer["Question"];
    var loggedInUserId = ViewBag.LoggedInUserId;

}
<head>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
</head>

<style>
    .tooltip-inner {
        max-width: 350px !important;
    }
    .pntr{
        cursor:pointer;
    }
</style>
<div class="card card-docs flex-row-fluid mb-2 overflow-auto">
    <!--begin::Card Body-->
    <div class="card-body fs-6 py-15 px-10 py-lg-15 px-lg-15 text-gray-700">
        <!--begin::Section-->
        <div class="p-0">
            <!--begin::Heading-->
            <h3 class="fw-bolder m-0" id="server-side">
                @SharedLocalizer[questionState.ToString() + "_List", SharedLocalizer["Question"]]
                <span class="material-symbols-outlined" style="margin-left: 5px; font-size: 130%; "
                      data-bs-toggle="tooltip" data-bs-placement="top"
                      title="@SharedLocalizer["Question_Filter_Warning"]">

                    info

                </span>
            </h3>
            <!--end::Heading-->
            <!--begin::CRUD-->
            <div class="py-5">
                <!--begin::Wrapper-->
                <div class="flex" data-kt-docs-table-toolbar="base">
                    <form class="form-question" asp-area="Trainer" asp-controller="Question" asp-action="GetQuestionsByGivenValues" asp-route-state="@questionState" method="post" onsubmit="return onSubmitForm()">
                        <input value="@questionState" id="stateInput" hidden />
                        <div class="classroomfilter flex-row">
                            <div class="row g-5 align-items-end">
                                <div class="form-floating col-md-2 mb-3">
                                    <input class="form-control form-control-solid mb-3 mb-lg-0" id="Content" name="Content" placeholder="@SharedLocalizer["Question_Content"]" value="@ViewBag.Content" />
                                    <label>@SharedLocalizer["Question_Content"]</label>
                                </div>

                                <div class="form-floating col-md-2 mb-3">
                                    <select class="form-select form-select-solid" data-control="select2" id="Subject" name="SubjectName" asp-items="ViewBag.SubjectList" onchange="onSubjectByIdChange()">
                                        <option value="">@SharedLocalizer["Choose"]</option>
                                    </select>
                                    <label>@SharedLocalizer["Subject_Name"]</label>
                                </div>



                                <div class="form-floating col-md-2 mb-3">
                                    <select class="form-select form-select-solid" data-control="select2" id="Subtopic" name="SubtopicName" asp-items=" ViewBag.SubtopicList">
                                        <option value=""> @SharedLocalizer["Choose"]</option>
                                    </select>
                                    <label>@SharedLocalizer["Subtopic"]</label>
                                </div>


                                <div class="form-floating col-md-2 mb-3">
                                    <select class="form-select form-select-solid" data-control="select2" id="QuestionDifficulty" name="QuestionDifficultyName" asp-items="ViewBag.QuestionDifficultyList ">
                                        <option value=""> @SharedLocalizer["Choose"]</option>
                                    </select>
                                    <label>@SharedLocalizer["Question_Difficulty"]</label>
                                </div>



                                <div class="form-floating col-md-2 mb-3">
                                    <input type="date" class="form-control form-control-solid" id="CreatedDate" name="CreatedDate" placeholder="@SharedLocalizer["Question_CreatedDate"]" />
                                    <label>@SharedLocalizer["Question_CreatedDate"]</label>
                                </div>
                                <div class="form-floating col-md-2 mb-3">
                                    <button type="submit" id="searchButton" style="min-width:99px;" class="btn btn-primary btn-lg col-md-4 hover-elevate-up" data-kt-user-table-filter="form">@SharedLocalizer["Show"]</button>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <!--end::Wrapper-->
                @if (ViewBag.ShowAllQuestions == false)
                {

                }
                else
                {
                    <!--begin::Datatable-->
                    <table id="kt_datatable_example_1"
                           class="table table-row-dashed fs-6 gy-5">
                        <thead>
                            <tr class="text-start text-gray-400 fw-bolder fs-7 text-uppercase gs-0">
                              
                                <th class="sorting" tabindex="0" aria-controls="kt_datatable_example_1" rowspan="1" colspan="1" aria-label="Payment Method: activate to sort column ascending" style="width: 131.25px;">@SharedLocalizer["Question_Content"]</th>
                                <th class="sorting" tabindex="0" aria-controls="kt_datatable_example_1" rowspan="1" colspan="1" aria-label="Payment Method: activate to sort column ascending" style="width: 131.25px;">@SharedLocalizer["Subject"]</th>
                                <th class="sorting" tabindex="0" aria-controls="kt_datatable_example_1" rowspan="1" colspan="1" aria-label="Payment Method: activate to sort column ascending" style="width: 131.25px;">@SharedLocalizer["Subtopic"]</th>
                                <th class="sorting" tabindex="0" aria-controls="kt_datatable_example_1" rowspan="1" colspan="1" aria-label="Payment Method: activate to sort column ascending" style="width: 131.25px;">@SharedLocalizer["Question_Type"]</th>
                                <th class="sorting" tabindex="0" aria-controls="kt_datatable_example_1" rowspan="1" colspan="1" aria-label="Payment Method: activate to sort column ascending" style="width: 131.25px;">@SharedLocalizer["Question_Difficulty"]</th>
                                <th class="sorting" tabindex="0" aria-controls="kt_datatable_example_1" rowspan="1" colspan="1" aria-label="Payment Method: activate to sort column ascending" style="width: 131.25px;">@SharedLocalizer["Time_Given"]</th>

                                @if (questionState == State.Approved)
                                {
                                    <th class="sorting"
                                        tabindex="0"
                                        aria-controls="kt_datatable_example_1"
                                        rowspan="1"
                                        colspan="1"
                                        aria-label="Payment Method: activate to sort column ascending"
                                        style="width: 131.25px">
                                        @SharedLocalizer["Approved_Date"]
                                    </th>
                                }
                                else if (questionState == State.Rejected)
                                {
                                    <th class="sorting"
                                        tabindex="0"
                                        aria-controls="kt_datatable_example_1"
                                        rowspan="1"
                                        colspan="1"
                                        aria-label="Payment Method: activate to sort column ascending"
                                        style="width: 131.25px">
                                        @SharedLocalizer["Rejected_Date"]
                                    </th>
                                }
                                else if (questionState == State.Reviewed)
                                {
                                    <th class="sorting"
                                        tabindex="0"
                                        aria-controls="kt_datatable_example_1"
                                        rowspan="1"
                                        colspan="1"
                                        aria-label="Payment Method: activate to sort column ascending"
                                        style="width: 131.25px">
                                        @SharedLocalizer["Review_Request_Date"]
                                    </th>
                                  
                                    <th class="sorting" 
                                        tabindex="0" 
                                        aria-controls="kt_datatable_example_1" 
                                        rowspan="1" 
                                        colspan="1" 
                                        aria-label="Payment Method: activate to sort column ascending" 
                                        style="width: 131.25px;">@SharedLocalizer["Created_Date"]
                                    </th>

                                    <th class="text-start min-w-100px sorting_disabled"
                                        rowspan="1"
                                        colspan="1"
                                        aria-label="Actions"
                                        style="width: 108.25px">
                                        @SharedLocalizer["Request_Description"]
                                    </th>
                                }
                                else if (questionState == State.Test)
                                {
                                    <th class="sorting"
                                        tabindex="0"
                                        aria-controls="kt_datatable_example_1"
                                        rowspan="1"
                                        colspan="1"
                                        aria-label="Payment Method: activate to sort column ascending"
                                        style="width: 131.25px">
                                        @SharedLocalizer["Test_Request_Date"]
                                    </th>
                                }
                         
                                else
                                {
                                 
                                    <th class="sorting" 
                                        tabindex="0" 
                                        aria-controls="kt_datatable_example_1" 
                                        rowspan="1" 
                                        colspan="1" 
                                        aria-label="Payment Method: activate to sort column ascending" 
                                        style="width: 131.25px;">@SharedLocalizer["Created_Date"]
                                    </th>
                                }

                                <th class="text-start min-w-100px sorting_disabled"
                                    rowspan="1"
                                    colspan="1"
                                    aria-label="Actions"
                                    style="width: 108.25px">
                                    @SharedLocalizer["Transactions"]
                                </th>
                            </tr>
                        </thead>
                        <tbody class="text-gray-600 fw-bold">
                            @if (Model.Any())
                            {@foreach (var item in Model)
                                {
                                    <tr>
                                        <td class="categories text-start">
                                            @if (item.Content != null)
                                            {
                                                <a data-bs-toggle="tooltip" data-bs-placement="right" data-placement="top" title="@item.Content">
                                                    <span class="post_category" style="white-space: nowrap;">@Html.Raw(item.Content.Length > 20 ? item.Content.Substring(0, 20) + "..." : item.Content)</span>
                                                </a>
                                            }
                                        </td>
                                        <td class="categories text-start">
                                            @if (item.SubjectName != null)
                                            {
                                                <a data-bs-toggle="tooltip" data-bs-placement="right" data-placement="top" title="@item.SubjectName">
                                                    <span class="post_category" style="white-space: nowrap;">@Html.Raw(item.SubjectName.Length > 20 ? item.SubjectName.Substring(0, 20) + "..." : item.SubjectName)</span>
                                                </a>
                                            }
                                        </td>
                                        <td class="categories text-start">
                                            @if (item.SubtopicName != null)
                                            {
                                                <a data-bs-toggle="tooltip" data-bs-placement="right" data-placement="top" title="@string.Join(", ", item.SubtopicName)">
                                                    <span class="post_category" style="white-space: nowrap;">@Html.Raw(string.Join(", ", item.SubtopicName).Length > 20 ? string.Join(", ", string.Join(", ", item.SubtopicName)).Substring(0, 20) + "..." : string.Join(", ", item.SubtopicName))</span>
                                                </a>
                                            }
                                        </td>
                                        <td class="categories text-start">
                                            <span class="post_category">@SharedLocalizer[@item.QuestionType.ToString()]</span>
                                        </td>
                                        <td class="categories text-start">
                                            <span class="post_category">@item.QuestionDifficultyName</span>
                                        </td>
                                        <td class="categories text-start">
                                            <span class="post_category">@item.TimeGiven.Value</span>
                                        </td>

                                        <td class="categories text-start">
                                            @if (questionState != State.Awaited)
                                            {
                                                <span class="post_category">@item.ModifiedDate.ToString("dd.MM.yyyy")</span>
                                            }
                                            else
                                            {
                                                <span class="post_category">@item.CreatedDate.ToString("dd.MM.yyyy")</span>
                                            }
                                        </td>
                                        @if (questionState == State.Reviewed)
                                        {
                                            <td class="categories text-start">
                                                <span class="post_category">@item.CreatedDate.ToString("dd.MM.yyyy")</span>
                                            </td>
                                            <td class="categories text-start">
                                                <h5 style="display: flex; align-items: center;">
                                                    <span class="material-symbols-outlined" style="margin-left: 5px; font-size: 160%; color: #7e8299; "
                                                          data-bs-toggle="tooltip" data-bs-placement="right"
                                                          title="@item.RequestDescription">
                                                        warning
                                                    </span>
                                                </h5>
                                            </td>
                                        }
                                        <td class="text-start">
                                           
                                            <div class="dropdown">
                                                <button class="btn btn-light btn-active-light-primary btn-sm dropdown-toggle" type="button" id="optionsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                                    @SharedLocalizer["Options"]
                                                    <span class="svg-icon fs-5 m-0">
                                                        <svg xmlns="http://www.w3.org/2000/svg"
                                                             xmlns:xlink="http://www.w3.org/1999/xlink"
                                                             width="24px"
                                                             height="24px"
                                                             viewBox="0 0 24 24"
                                                             version="1.1">
                                                            <g stroke="none"
                                                               stroke-width="1"
                                                               fill="none"
                                                               fill-rule="evenodd">
                                                                <polygon points="0 0 24 0 24 24 0 24"></polygon>
                                                                <path d="M6.70710678,15.7071068 C6.31658249,16.0976311 5.68341751,16.0976311 5.29289322,15.7071068 C4.90236893,15.3165825 4.90236893,14.6834175 5.29289322,14.2928932 L11.2928932,8.29289322 C11.6714722,7.91431428 12.2810586,7.90106866 12.6757246,8.26284586 L18.6757246,13.7628459 C19.0828436,14.1360383 19.1103465,14.7686056 18.7371541,15.1757246 C18.3639617,15.5828436 17.7313944,15.6103465 17.3242754,15.2371541 L12.0300757,10.3841378 L6.70710678,15.7071068 Z"
                                                                      fill="currentColor"
                                                                      fill-rule="nonzero"
                                                                      transform="translate(12.000003, 11.999999) rotate(-180.000000) translate(-12.000003, -11.999999)"></path>
                                                            </g>
                                                        </svg>
                                                    </span>
                                                </button>


                                                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="optionsDropdown">
                                                    <li>
                                                        <a class="dropdown-item" asp-action="Details" asp-route-id="@item.Id" target="_blank">@SharedLocalizer["Details"]</a>
                                                    </li>

                                                    @if (questionState == State.Awaited || questionState == State.Reviewed)
                                                    {
                                                        @if (questionState == State.Reviewed)
                                                        {
                                                            <li>
                                                                <a class="dropdown-item reviewedQuestionUpdateButton pntr" data-id="@item.Id">@SharedLocalizer["Update"]</a>
                                                            </li>
                                                        }
                                                        else
                                                        {
                                                            <li>
                                                                <a class="dropdown-item editButton pntr" data-id="@item.Id">@SharedLocalizer["Update"]</a>
                                                            </li>
                                                        }

                                                        <li>
                                                            <a class="dropdown-item revision-button pntr" data-question-id="@item.Id">@SharedLocalizer["Revision_Procedures"]</a>
                                                        </li>
                                                        <li>
                                                            <a class="dropdown-item deleteAction pntr" data-id="@item.Id">@SharedLocalizer["Delete"]</a>
                                                        </li>
                                                    }
                                                </ul>
                                            </div>
                                        </td>

                                    </tr>

                                } }
                        else
                        {
                            <tr>
                                <td class="categories text-center" colspan="6">
                                    @SharedLocalizer["No_Data"]
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                    <div class="row">
                        <div class="col-sm-12 col-md-5 d-flex align-items-center justify-content-center justify-content-md-start">
                            <div class="dataTables_length" id="kt_datatable_example_1_length">
                                <label>
                                    <select id="pageSizeDropdown" name="kt_table_users_length" aria-controls="kt_table_users" class="form-select form-select-sm form-select-solid">
                                        <option value="10">10</option>
                                        <option value="25">25</option>
                                        <option value="50">50</option>
                                        <option value="100">100</option>
                                    </select>
                                </label>
                            </div>
                            <div class="col-5" style="margin-left:10px">
                                <span class="text" style="white-space: nowrap;">
                                    @SharedLocalizer["Total"] @Model.TotalItemCount @SharedLocalizer["From"] @(Model.PageNumber * Model.PageSize - (Model.PageSize - 1))
                                    @SharedLocalizer["To"] @(Model.PageNumber * Model.PageSize > Model.TotalItemCount ? Model.TotalItemCount : Model.PageNumber * Model.PageSize)
                                    @SharedLocalizer["Records_Are_Being_Displayed"]
                                </span>
                            </div>
                        </div>
                        <div class="d-flex justify-content-end mt-3">

                            @Html.PagedListPager(Model,
                                     page => Url.Action("GetQuestionsByGivenValues", new
                                     {
                                         page,
                                         pageSize = ViewBag.PageSize,
                                         showAllQuestions = ViewBag.ShowAllQuestions,
                                         state = ViewData["Question_State"],
                                         // Additional filter parameters
                                         content = ViewBag.Content,                   // Example filter parameter
                                         subjectName = ViewBag.SubjectName,           // Make sure these match your action method's parameter names
                                         subtopicName = ViewBag.SubtopicName,
                                         questionDifficultyName = ViewBag.QuestionDifficultyName,
                                         createdDate = ViewBag.CreatedDate
                                        
                                     }),
                                     new PagedListRenderOptions
                        {
                            Display = PagedListDisplayMode.Always,
                            UlElementClasses = new[] { "pagination", "justify-content-center" },
                            LiElementClasses = new[] { "page-item" },
                            PageClasses = new[] { "page-link" },
                            LinkToFirstPageFormat = @localizer["First"],
                            LinkToLastPageFormat = @localizer["Last"],
                            ContainerDivClasses = new[] { "d-flex", "justify-content-center" }
                        })
                        </div>
                    </div>
                }
                <!--end::Datatable-->
            </div>
            <!--end::CRUD-->
        </div>
        <!--end::Section-->
    </div>
    <!--end::Card Body-->
</div>

@* <div id="kt_modal_update_question_con">

    </div>
*@
<partial name="~/Areas/Trainer/Views/Question/_ReviewedQuestionUpdatePartial.cshtml" model="new TrainerQuestionUpdateVM()"></partial>
<partial name="~/Areas/Trainer/Views/Question/_QuestionUpdatePartial.cshtml" model="new TrainerQuestionUpdateVM()"></partial>


@section Scripts {
    <script src="~/newlayouts/dist/assets/plugins/custom/datatables/datatables.bundle.js"></script>
    <script src="~/newlayouts/src/js/custom/apps/user-management/question/questionUpdate.js"></script>
    <script src="~/newlayouts/src/js/custom/apps/user-management/question/questionSelect.js"></script>
    <script src="~/newLayouts/src/js/custom/apps/user-management/question/reviewedQuestionSelect.js"></script>
    <script src="~/newLayouts/src/js/custom/apps/user-management/question/reviewedQuestionUpdate.js"></script>
    <script src="~/js/pictureUpload.js"></script>


    <script>
        $(document).ready(function () {
            // Sayfa kaydırıldığında çalışacak scroll olayını dinle
            $(window).on('scroll', function () {
                // Bootstrap'in dropdown metodu ile açık olan tüm dropdown menülerini kapat
                $('.dropdown-menu.show').removeClass('show');
                $('.dropdown-toggle[aria-expanded="true"]').attr('aria-expanded', 'false');
                console.log("Scroll hareketi çalıştı.")
            });

        });
    </script>



    <script>
            var localizedStrings = {
                answers: '@SharedLocalizer["Answers"]',
                newoption: '@SharedLocalizer["New_Option"]',
                addnewoption: '@SharedLocalizer["Add_New_Options"]',
                choose: '@SharedLocalizer["Choose"]',
                text: '@SharedLocalizer["Text"]',
                image: '@SharedLocalizer["Image"]'
            };

        // Razor tarafından gönderilen `pageSize` ve `questionState` değişkenlerini JavaScript değişkenlerine atayın
        var currentPageSize = "@ViewBag.PageSize" || "10";  // Varsayılan değer olarak 10
        var questionState = "@ViewData["Question_State"]";
        var showAllQuestions = "@ViewBag.ShowAllQuestions" === "True";

        document.addEventListener('DOMContentLoaded', function () {
            // Başlangıç değeri olarak dropdown'a currentPageSize değerini ayarlayın
            $('#pageSizeDropdown').val(currentPageSize);
        });        

        $(document).ready(function () {
            $('#pageSizeDropdown').change(function () {
                var selectedPageSize = $(this).val();
                // API endpoint oluştur
                var url = '@Url.Action("QuestionList", "Question")';

                url += `?pageSize=${selectedPageSize}&showAllQuestions=${showAllQuestions}&state=${encodeURIComponent(questionState)}&page=1`;


                window.location.href = url;  // Yeni URL'e yönlendir
               
            });
        });

        $(document).ready(function () {
            $('#pageSizeDropdown').change(function () {
                var selectedPageSize = $(this).val();

                // API endpoint oluştur
                var url = '@Url.Action("GetQuestionsByGivenValues", "Question")';

                url += `?pageSize=${selectedPageSize}&showAllQuestions=${showAllQuestions}&state=${encodeURIComponent(questionState)}&page=1`;


                window.location.href = url;  // Yeni URL'e yönlendir
            });
        });        


            $(document).ready(function () {
                $('.editButton').on('click', function () {
                    // Get the record's ID via attribute
                    var id = $(this).attr('data-id');

                    $.ajax({
                        url: "@Url.Action("Update")" + "?id=" + id,
                        method: 'GET',
                        success: function (response) {
                            // Populate the form fields with the data returned from the server
                            $('#kt_modal_update_question_form')
                                .find('[name="id"]').val(response.id).end()
                                .find('[name="Content"]').val(response.content).end()
                                .find('[name="Gains"]').val(response.gains).end()
                                .find('[name="TimeGiven"]').val(response.timeGiven).end()
                                .find('[name="Target"]').val(response.target).end();
                            var imageElement = document.getElementById("previewImage");
                            if (response.image != null) {
                                imageElement.src = "data:image/jpeg;base64," + response.image;
                                imageElement.style.display = "block"
                            }
                            else {
                                imageElement.src = "data:image/jpeg;base64," + "";
                                imageElement.style.display = "none"
                            }


                            var questionTypeSelect = $('#QuestionType'); // Assuming this is your select element for QuestionType
                            questionTypeSelect.empty();
                            $.each(response.questionTypeList, function (index, item) {
                                var option = $('<option>', {
                                    value: item.value,
                                    text: item.text,
                                    selected: item.value == response.questionType.toString()
                                });
                                questionTypeSelect.append(option);
                            });

                            var productSelect = $('#ProductId'); // Assuming this is your select element for SubtopicId
                            productSelect.empty();
                            $.each(response.productList, function (index, item) {
                                var option = $('<option>', {
                                    value: item.value,
                                    text: item.text,
                                    selected: item.value == response.productId.toString()
                                });
                                productSelect.append(option);
                            });
                            var SubjectSelect = $('#SubjectId'); // Assuming this is your select element for SubtopicId
                            SubjectSelect.empty();
                            $.each(response.subjectList, function (index, item) {
                                var option = $('<option>', {
                                    value: item.value,
                                    text: item.text,
                                    selected: item.value == response.subjectId.toString()
                                });
                                SubjectSelect.append(option);
                            });
                            var SubtopicSelect = $('#SubtopicId');
                            SubtopicSelect.empty();

                            $.each(response.subtopicList, function (index, item) {
                                var option = new Option(item.text, item.value, false, false);
                                if (Array.isArray(response.subtopicId) && response.subtopicId.includes(item.value.toString())) {
                                    $(option).prop('selected', true);
                                } else if (item.value == response.subtopicId.toString()) {
                                    $(option).prop('selected', true);
                                }

                                SubtopicSelect.append(option);
                            });
                            var QuestionDifficultySelect = $('#QuestionDifficultyId'); // Assuming this is your select element for SubtopicId
                            QuestionDifficultySelect.empty();
                            $.each(response.questionDifficultyList, function (index, item) {
                                var option = $('<option>', {
                                    value: item.value,
                                    text: item.text,
                                    selected: item.value == response.questionDifficultyId.toString()
                                });
                                QuestionDifficultySelect.append(option);
                            });

                            var questionAnswersDiv = document.getElementById('questionAnswersDiv');
                            questionAnswersDiv.innerHTML = '';
                            if (response.questionType.toString() == 1 || response.questionType.toString() == 2) {
                                questionAnswersDiv.innerHTML = getAnswerChoicesHtmlQuestion(response.questionType.toString(), response.questionAnswersList);
                                questionAnswersDiv.removeAttribute("hidden");
                            }
                            else if (response.questionType.toString() == 3) {
                                questionAnswersDiv.innerHTML = getCheckbox(response.questionAnswersList);
                                questionAnswersDiv.removeAttribute("hidden");
                            }
                            else {
                                questionAnswersDiv.innerHTML = getClassicUpdateQuestionAnswer(response.questionAnswersList);
                                questionAnswersDiv.removeAttribute("hidden");
                            }
                            // Show the Bootstrap modal
                            $('#kt_modal_update_question').modal('show');
                        }
                    });
                });
            });
    </script>
   
    <script>
        $(document).ready(function () {
             $('.reviewedQuestionUpdateButton').on('click', function () {
                var id = $(this).attr('data-id');
                $.ajax({
                    url: "@Url.Action("UpdateReviewed")" + "?id=" + id,
                    method: 'GET',
                    success: function (response) {
                        // Populate the form fields with the data returned from the server
                        $('#kt_modal_update_question_reviewed_form')
                            .find('[name="id"]').val(response.id).end()
                            .find('[name="Content"]').val(response.content).end()
                            .find('[name="Gains"]').val(response.gains).end()
                            .find('[name="TimeGiven"]').val(response.timeGiven).end()
                            .find('[name="Target"]').val(response.target).end()
                            .find('[name="ReviewComment"]').val(response.reviewComment).end();
                        var imageElement = document.getElementById("previewImage");
                        if (response.image != null) {
                            imageElement.src = "data:image/jpeg;base64," + response.image;
                            imageElement.style.display = "block"
                        }
                        else {
                            imageElement.src = "data:image/jpeg;base64," + "";
                            imageElement.style.display = "none"
                        }


                        var questionTypeSelect = $('#questionTypeReviewed'); // Assuming this is your select element for QuestionType
                        questionTypeSelect.empty();
                        $.each(response.questionTypeList, function (index, item) {
                            var option = $('<option>', {
                                value: item.value,
                                text: item.text,
                                selected: item.value == response.questionType.toString()
                            });
                            questionTypeSelect.append(option);
                        });

                        var productSelect = $('#productIdReviewed'); // Assuming this is your select element for SubtopicId
                        productSelect.empty();
                        $.each(response.productList, function (index, item) {
                            var option = $('<option>', {
                                value: item.value,
                                text: item.text,
                                selected: item.value == response.productId.toString()
                            });
                            productSelect.append(option);
                        });
                        var SubjectSelect = $('#subjectIdReviewed'); // Assuming this is your select element for SubtopicId
                        SubjectSelect.empty();
                        $.each(response.subjectList, function (index, item) {
                            var option = $('<option>', {
                                value: item.value,
                                text: item.text,
                                selected: item.value == response.subjectId.toString()
                            });
                            SubjectSelect.append(option);
                        });
                        var SubtopicSelect = $('#subtopicIdReviewed');
                        SubtopicSelect.empty();

                        $.each(response.subtopicList, function (index, item) {
                            var option = new Option(item.text, item.value, false, false);
                            if (Array.isArray(response.subtopicId) && response.subtopicId.includes(item.value.toString())) {
                                $(option).prop('selected', true);
                            } else if (item.value == response.subtopicId.toString()) {
                                $(option).prop('selected', true);
                            }

                            SubtopicSelect.append(option);
                        });
                        var QuestionDifficultySelect = $('#questionDifficultyIdReviewed') // Assuming this is your select element for SubtopicId
                        QuestionDifficultySelect.empty();
                        $.each(response.questionDifficultyList, function (index, item) {
                            var option = $('<option>', {
                                value: item.value,
                                text: item.text,
                                selected: item.value == response.questionDifficultyId.toString()
                            });
                            QuestionDifficultySelect.append(option);
                        });

                        var questionAnswersDiv = document.getElementById('questionAnswersDivReviewed');
                        questionAnswersDiv.innerHTML = '';

                        if (response.questionType.toString() == 1 || response.questionType.toString() == 2) {
                            questionAnswersDiv.innerHTML = getAnswerChoicesHtmlQuestionReviewed(response.questionType.toString(), response.questionAnswersList);
                            questionAnswersDiv.removeAttribute("hidden");
                        }
                        else if (response.questionType.toString() == 3) {
                            
                            questionAnswersDiv.innerHTML = getCheckboxReviewed(response.questionAnswersList, response.questionType.toString());
                            questionAnswersDiv.removeAttribute("hidden");
                        }

                        else {
                            questionAnswersDiv.innerHTML = getClassicUpdateQuestionAnswerReviewed(response.questionAnswersList);
                            questionAnswersDiv.removeAttribute("hidden");
                        }
                        // Show the Bootstrap modal
                        $('#kt_modal_update_question_reviewed').modal('show');
                    }
                });
            });
        });
    </script>
    <script>
        var localizer = {
            emptyTable: '@SharedLocalizer["Empty_Data"]',
            info: '@SharedLocalizer["Info"]',
            infoEmpty: '@SharedLocalizer["Info_Empty"]',
            infoFiltered: '@SharedLocalizer["Info_Filtered"]',
            zeroRecords: '@SharedLocalizer["Zero_Records"]',
            lengthMenu: '@SharedLocalizer["Length_Menu"]'
        };
        $(document).ready(function () {
            var dt = $("#kt_datatable_example_1").DataTable({
                pageLength: 25, // Set default page length to 25
                lengthMenu: [10, 25, 50, 100], // Include 25 in length menu options
                dom:
                    '<"row"<"col-sm-12"tr>>' +
                    '<"row"<"col-sm-12 col-md-5"i><"col-sm-12 col-md-7"p>>',
                language: {
                    emptyTable: localizer.emptyTable,
                    info: localizer.info,
                    infoEmpty: localizer.infoEmpty,
                    infoFiltered: localizer.infoFiltered,
                    zeroRecords: localizer.zeroRecords,
                    lengthMenu: localizer.lengthMenu
                }
            });
            $('select[name="kt_datatable_example_1"]').change(function () {
                dt.page.len($(this).val()).draw();
            });

            $('input[data-kt-docs-table-filter="search"]').on('keyup', function () {
                dt.search($(this).val()).draw();
            });
            function updatePaginationArrows() {
                $('#kt_datatable_example_1_previous a').html('<i class="fa fa-chevron-left"></i>');
                $('#kt_datatable_example_1_next a').html('<i class="fa fa-chevron-right"></i>');
            }
            updatePaginationArrows();
            dt.on('draw.dt', function () {
                updatePaginationArrows();
            });

            $(document).ready(function () {
                $('[data-bs-toggle="tooltip"]').tooltip({
                    title: function () {
                        return $(this).attr('data-bs-original-title');
                    }
                });
            });
        });
        // document.addEventListener('DOMContentLoaded', function () {
        //     // Dropdown menu element
        //     var optionsDropdown = document.getElementById('optionsDropdown');

        //     // Toggle dropdown on click
        //     optionsDropdown.addEventListener('click', function (e) {
        //         e.preventDefault();
        //         var optionsMenu = new KTMenu(optionsDropdown);
        //         optionsMenu.toggle();
        //     });
        // });
        $('#exampleModal').appendTo("body")
        const myModal = new bootstrap.Modal('#exampleModal')

        const getQuestionDetails = (id) => {
            let spinner = `<div class="spinner-border text-primary" role="status">
                                                                                                <span class="visually-hidden">Loading...</span>
                                                                                            </div>`
            $('#question-details').html(spinner)
            myModal.show();

            $.ajax({
                url: "@Url.Action("QuestionDetails")" + "?id=" + id,
                method: "get",
                success: function (response) {
                    $('#question-details').html(response)
                },
                error: function (response) {
                    console.log(response.responseText);
                    myModal.hide()
                    Swal.fire(
                        'Hata !',
                        'İstediğiniz soruya ait detaylar alınamadı. Lütfen sistem yöneticinize başvurun. (Error 404)',
                        'error'
                    )
                }
            })
        }
    </script>
    <script>
        $(document).on("click", ".revision-button", function () {
            var questionId = $(this).data("question-id");
            redirectToQuestionRevisionList(questionId);
        });

        var localize = {
            info: '@ViewLocalizer["Info"]',
            revise: '@ViewLocalizer["Revise"]'
        };

        function redirectToQuestionRevisionList(questionId) {
            var url = "@Url.Action("QuestionRevisionList")" + "?id=" + questionId;

            $.get(url)
                .done(function (data) {
                    if (data === "Revize işlemi yoktur") {
                        // Eğer revize işlemi yoksa, SweetAlert2 ile bir bildirim göster
                        Swal.fire({
                            icon: 'info',
                            title: localize.info,
                            text: localize.revise
                        });
                    } else {
                        // Revize işlemi varsa, sayfayı yönlendir
                        window.location.href = url;
                    }
                })
                .fail(function () {
                    // Hata durumunda bir hata mesajı göster
                    Swal.fire({
                        icon: 'error',
                        title: 'Hata',
                        text: 'Bir hata oluştu.'
                    });
                });
        }
    </script>
    <script>
        // Bu fonksiyon, soru tipine bağlı olarak açıklama ekler
        function updateDescription() {
            var selectedQuestionType = document.getElementById('QuestionType').value;
            var description = getQuestionTypeDescription(selectedQuestionType);
            var descriptionTextArea = document.getElementById('questionTypeDescription');
            descriptionTextArea.value = description;
            var container = document.getElementById('questionTypeDescriptionContainer');
            if (description.trim() !== '') {
                container.style.display = 'block';
            } else {
                container.style.display = 'none';
            }
        }

        @functions {
        public static string GetDescriptionForQuestionType(string questionTypeId)
        {
            switch (questionTypeId)
            {
                case "1":
                    return "İlgili soruda birden fazla cevap işaretlenebilir.";
                case "2":
                    return "İlgili sorunun bir doğru cevabı işaretlenebilir.";
                case "3":
                    return "İlgili sorunun doğru ya da yanlış bir cevabı işaretlenebilir.";
                case "4":
                    return "İlgili sorunun doğru cevabı metin şeklindedir.";
                default:
                    return "Soru tipi hakkında bilgi bulunamadı.";
            }
        }
    }

        function showTooltip(element) {
            var tooltipText = element.getAttribute('data-title');
            if (tooltipText) {
                // Burada tooltip göstermek için kullanacağınız mantığı uygulayabilirsiniz.
                // Örnek olarak basit bir alert kutusu kullanılmıştır:
                alert(tooltipText);
            }
        }

    document.addEventListener('DOMContentLoaded', function () {
        updateDescription();
    });

    document.getElementById('QuestionType').addEventListener('change', function () {
        updateDescription();
    });

    $(document).ready(function () {
        $('[data-toggle="tooltip"]').tooltip();
    });
    </script>
    <script>
    var localizedTexts = {
        confirmTitle: '@SharedLocalizer["Confirm_Delete_Title"]', // "fullName adlı admini silmek istediğinize emin misiniz?"
        confirmText: '@SharedLocalizer["Confirm_Delete_Text"]', // "Bu işlem geri alınamaz!"
        confirmButtonText2: '@SharedLocalizer["Confirm_Button_Text"]', // "Evet, sil!"
        cancelButtonText2: '@SharedLocalizer["Cancel_Button_Text"]', // "Hayır, iptal et"
        unsavedChangesTitle: '@SharedLocalizer["Unsaved_Changes_Title"]',
        unsavedChangesText: '@SharedLocalizer["Unsaved_Changes_Text"]',
        confirmButtonText: '@SharedLocalizer["Yes_Leave"]',
        cancelButtonText: '@SharedLocalizer["No_Stay"]',
        formSubmittedText: '@SharedLocalizer["Form_Submitted_Text"]',
        okButtonText: '@SharedLocalizer["Ok_Button_Text"]'
    };
    $(document).ready(function () {
        $(".deleteAction").click(function () {
            const id = $(this).data("id");
            Swal.fire({
                title: `${localizedTexts.confirmTitle}`,
                text: localizedTexts.confirmText,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: localizedTexts.confirmButtonText2,
                cancelButtonText: localizedTexts.cancelButtonText2
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: "GET",
                        url: "@Url.Action("Delete")" + "?id=" + id,
                        success: function (result) {
                            if (result.isSuccess) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Başarılı',
                                    text: 'Silme işlemi başarıyla tamamlandı!'
                                });
                                setTimeout(() => location.reload(), 2000);
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Hata',
                                    text: 'Silme işlemi sırasında bir hata oluştu!',
                                    confirmButtonText: 'Tamam'
                                });
                            }
                        },
                        error: function () {
                            Swal.fire({
                                icon: 'error',
                                title: 'Hata',
                                text: 'Silme işlemi sırasında bir hata oluştu!'
                            });
                        }
                    });
                }
            });
        });

    });
    </script>
    <script>
        let subjectList = [];
        let subtopicList = [];
        async function getSubtopics(selectedSubjectId) {
            return $.ajax({
                url: '/Trainer/Question/GetSubtopicsBySubjectId',
                data: { subjectId: selectedSubjectId },
            });
        };
        async function onSubjectByIdChange() {
            subtopics = subtopics ? await getSubtopics($("#Subject").val()) : subtopics;
            populateSelectList("Subtopic", subtopics);
        };

        async function populateSelectList(selectListId, data) {
            let selectListOptions = data.map((item, index) => `<option value="${item.value}">${item.text}</option>`);
            let selectList = `<option value="" disabled selected>--- Seçiniz ---</option>`.concat(selectListOptions);
            document.getElementById(selectListId).innerHTML = selectList;

        };</script>
    <script>
    function onSubmitForm() {
        var content = document.getElementById("Content");
        var subject = document.getElementById("Subject");
        var subtopic = document.getElementById("Subtopic");
        var questionDifficulty = document.getElementById("QuestionDifficulty");
        var createdDate = document.getElementById("CreatedDate");

        if (!content.value.trim() && !subject.value && !subtopic.value && !questionDifficulty.value && !createdDate.value) {
            var questionState = "@questionState"; // State değeri
            var showAllQuestions = true;

            var baseUrl = '@Url.Action("QuestionList")';
            var queryString = `?state=${encodeURIComponent(questionState)}&showAllQuestions=${showAllQuestions}`;
            var url = baseUrl + queryString;

            window.location.href = url;
            return false;
        } else {
            return true;
        }
    }
    </script>

}

